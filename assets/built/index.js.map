{"version":3,"file":"index.js","sources":["../js/fetchPageViews.js","../js/infiniteScroll.js","../js/index.js"],"sourcesContent":["export async function fetchTotalVisitors(pagePath) {\n    try {\n        // Base URL for fetching stats\n        const baseUrl = \"https://plausible.sivert.io/api/stats/golf.sivert.io/top-stats/\";\n        const date = new Date().toISOString().split(\"T\")[0]; // Current date in YYYY-MM-DD\n\n        // Construct the query string dynamically\n        const params = new URLSearchParams({\n            period: \"all\",\n            date: date,\n            filters: JSON.stringify([\n                [\"is\", \"event:page\", [pagePath]],\n            ]),\n            with_imported: \"true\",\n            comparison: \"previous_period\",\n            compare_from: \"undefined\",\n            compare_to: \"undefined\",\n            match_day_of_week: \"true\",\n        });\n\n        // Fetch the data\n        const response = await fetch(`${baseUrl}?${params.toString()}`);\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Extract the unique visitors from the response\n        const uniqueVisitors = data.top_stats.find(stat => stat.name === \"Total visits\")?.value || 0;\n        console.log(`Total unique visitors for ${pagePath}:`, uniqueVisitors);\n        return uniqueVisitors; // Return the total unique visitors\n    } catch (error) {\n        console.error(`Failed to fetch total visitors for ${pagePath}:`, error);\n        return \"Error\";\n    }\n}\n","import { fetchTotalVisitors } from \"./fetchPageViews\";\n\nexport default function infiniteScroll() {\n    let link = document.querySelector('link[rel=\"next\"]')?.getAttribute('href');\n\n    if (!link) {\n        return;\n    }\n\n    // Fetch and update views for existing posts on page load\n    const existingPosts = document.querySelectorAll(\".post\");\n    existingPosts.forEach((post) => {\n        const postUrl = post.querySelector(\".gh-card-link\")?.getAttribute(\"href\");\n        const viewsElement = document.getElementById(postUrl);\n\n        if (postUrl && viewsElement) {\n            fetchTotalVisitors(postUrl).then((views) => {\n                viewsElement.textContent = `${views} views`;\n            });\n        }\n    });\n\n    const options = {\n        rootMargin: \"150px\",\n    };\n\n    const callback = (entries, observer) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting && link) {\n                getNextPage(link)\n                    .then(({ posts, nextLink }) => {\n                        const postFeed = document.querySelector(\".gh-postfeed\");\n\n                        posts.forEach((post) => {\n                            postFeed.append(post);\n\n                            // Fetch views for each new post\n                            const postUrl = post.querySelector(\".gh-card-link\")?.getAttribute(\"href\");\n                            const viewsElement = post.querySelector(\".gh-card-meta[id]\");\n\n                            if (postUrl && viewsElement) {\n                                fetchTotalVisitors(postUrl).then((views) => {\n                                    viewsElement.textContent = `${views} views`;\n                                });\n                            }\n                        });\n\n                        if (nextLink) {\n                            link = nextLink;\n                            observer.observe(document.querySelector(\".post:last-of-type\"));\n                        } else {\n                            observer.disconnect();\n                        }\n                    })\n                    .catch((error) => console.error(\"Failed to fetch next page:\", error));\n            }\n        });\n    };\n\n    let observer = new IntersectionObserver(callback, options);\n    observer.observe(document.querySelector(\".post:last-of-type\"));\n}\n\n// Fetch and parse next page function\nasync function getNextPage(url) {\n    try {\n        const res = await fetch(url);\n\n        if (!res.ok) {\n            throw new Error(\"Failed to fetch page\");\n        }\n\n        const nextPageHtml = await res.text();\n        const parser = new DOMParser();\n        const parsed = parser.parseFromString(nextPageHtml, \"text/html\");\n        const posts = parsed.querySelectorAll(\".post\");\n        const nextLink = parsed.querySelector('link[rel=\"next\"]')?.getAttribute(\"href\");\n\n        return { posts, nextLink };\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n","// JavaScript files are compiled and minified during the build process to the assets/built folder. See available scripts in the package.json file.\n\n// Import JS\nimport infiniteScroll from \"./infiniteScroll\";\n\n\n// Call the menu and infinite scroll functions\ninfiniteScroll();\n"],"names":["async","fetchTotalVisitors","pagePath","baseUrl","date","Date","toISOString","split","params","URLSearchParams","period","filters","JSON","stringify","with_imported","comparison","compare_from","compare_to","match_day_of_week","response","fetch","toString","ok","Error","status","data","json","uniqueVisitors","top_stats","find","stat","name","value","console","log","error","link","document","querySelector","getAttribute","querySelectorAll","forEach","post","postUrl","viewsElement","getElementById","then","views","textContent","IntersectionObserver","callback","entries","observer","entry","isIntersecting","url","res","nextPageHtml","text","parsed","DOMParser","parseFromString","posts","nextLink","getNextPage","_ref","postFeed","append","observe","disconnect","catch","rootMargin","infiniteScroll"],"mappings":"yBAAOA,eAAeC,EAAmBC,GACrC,IAEI,MAAMC,EAAU,kEACVC,GAAO,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAG3CC,EAAS,IAAIC,gBAAgB,CAC/BC,OAAQ,MACRN,KAAMA,EACNO,QAASC,KAAKC,UAAU,CACpB,CAAC,KAAM,aAAc,CAACX,MAE1BY,cAAe,OACfC,WAAY,kBACZC,aAAc,YACdC,WAAY,YACZC,kBAAmB,SAIjBC,QAAiBC,MAAM,GAAGjB,KAAWK,EAAOa,cAElD,IAAKF,EAASG,GACV,MAAM,IAAIC,MAAM,uBAAuBJ,EAASK,UAGpD,MAAMC,QAAaN,EAASO,OAGtBC,EAAiBF,EAAKG,UAAUC,MAAKC,GAAsB,iBAAdA,EAAKC,QAA0BC,OAAS,EAE3F,OADAC,QAAQC,IAAI,6BAA6BhC,KAAayB,GAC/CA,CACV,CAAC,MAAOQ,GAEL,OADAF,QAAQE,MAAM,sCAAsCjC,KAAaiC,GAC1D,OACX,CACJ,ECnCe,WACX,IAAIC,EAAOC,SAASC,cAAc,qBAAqBC,aAAa,QAEpE,IAAKH,EACD,OAIkBC,SAASG,iBAAiB,SAClCC,SAASC,IACnB,MAAMC,EAAUD,EAAKJ,cAAc,kBAAkBC,aAAa,QAC5DK,EAAeP,SAASQ,eAAeF,GAEzCA,GAAWC,GACX3C,EAAmB0C,GAASG,MAAMC,IAC9BH,EAAaI,YAAc,GAAGD,SAAa,GAEnD,IAwCW,IAAIE,sBAjCFC,CAACC,EAASC,KACvBD,EAAQV,SAASY,IACTA,EAAMC,gBAAkBlB,GAoCxCpC,eAA2BuD,GACvB,IACI,MAAMC,QAAYpC,MAAMmC,GAExB,IAAKC,EAAIlC,GACL,MAAM,IAAIC,MAAM,wBAGpB,MAAMkC,QAAqBD,EAAIE,OAEzBC,GADS,IAAIC,WACGC,gBAAgBJ,EAAc,aAC9CK,EAAQH,EAAOnB,iBAAiB,SAChCuB,EAAWJ,EAAOrB,cAAc,qBAAqBC,aAAa,QAExE,MAAO,CAAEuB,QAAOC,WACnB,CAAC,MAAO5B,GACL,MAAM,IAAIZ,MAAMY,EACpB,CACJ,CArDgB6B,CAAY5B,GACPU,MAAKmB,IAAyB,IAAxBH,MAAEA,EAAKC,SAAEA,GAAUE,EACtB,MAAMC,EAAW7B,SAASC,cAAc,gBAExCwB,EAAMrB,SAASC,IACXwB,EAASC,OAAOzB,GAGhB,MAAMC,EAAUD,EAAKJ,cAAc,kBAAkBC,aAAa,QAC5DK,EAAeF,EAAKJ,cAAc,qBAEpCK,GAAWC,GACX3C,EAAmB0C,GAASG,MAAMC,IAC9BH,EAAaI,YAAc,GAAGD,SAAa,GAEnD,IAGAgB,GACA3B,EAAO2B,EACPX,EAASgB,QAAQ/B,SAASC,cAAc,wBAExCc,EAASiB,YACb,IAEHC,OAAOnC,GAAUF,QAAQE,MAAM,6BAA8BA,IACtE,GACF,GAlCU,CACZoC,WAAY,UAqCPH,QAAQ/B,SAASC,cAAc,sBAC5C,CCtDAkC"}