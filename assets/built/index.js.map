{"version":3,"file":"index.js","sources":["../js/fetchPageViews.js","../js/infiniteScroll.js","../js/index.js"],"sourcesContent":["export async function fetchTotalVisitors(pagePath) {\n    try {\n        // Base URL for fetching stats\n        const baseUrl =\n            \"https://plausible.sivert.io/api/stats/golf.sivert.io/top-stats/\";\n        const date = new Date().toISOString().split(\"T\")[0]; // Current date in YYYY-MM-DD\n\n        // Construct the query string dynamically\n        const params = new URLSearchParams({\n            period: \"all\",\n            date: date,\n            filters: JSON.stringify([[\"is\", \"event:page\", [pagePath]]]),\n            with_imported: \"true\",\n            comparison: \"previous_period\",\n            compare_from: \"undefined\",\n            compare_to: \"undefined\",\n            match_day_of_week: \"true\",\n        });\n\n        // Fetch the data\n        const response = await fetch(`${baseUrl}?${params.toString()}`);\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        // Extract the unique visitors from the response\n        const uniqueVisitors =\n            data.top_stats.find((stat) => stat.name === \"Total visits\")\n                ?.value || 0;\n        console.log(`Total unique visitors for ${pagePath}:`, uniqueVisitors);\n        return uniqueVisitors; // Return the total unique visitors\n    } catch (error) {\n        console.error(`Failed to fetch total visitors for ${pagePath}:`, error);\n        return \"Error\";\n    }\n}\n","import { fetchTotalVisitors } from \"./fetchPageViews\";\n\n// Format number like YouTube (e.g., 1.2k, 3.5M)\nfunction formatNumberYouTubeStyle(number) {\n    if (number >= 1_000_000_000) {\n        return `${(number / 1_000_000_000).toFixed(1)}B`; // Billions\n    } else if (number >= 1_000_000) {\n        return `${(number / 1_000_000).toFixed(1)}M`; // Millions\n    } else if (number >= 1_000) {\n        return `${(number / 1_000).toFixed(1)}k`; // Thousands\n    }\n    return number.toString(); // Less than 1k\n}\n\nexport default function infiniteScroll() {\n    let link = document.querySelector('link[rel=\"next\"]')?.getAttribute(\"href\");\n\n    if (!link) {\n        return;\n    }\n\n    // Fetch and update views for existing posts on page load\n    const existingPosts = document.querySelectorAll(\".post\");\n    existingPosts.forEach((post) => {\n        const postUrl = post\n            .querySelector(\".gh-card-link\")\n            ?.getAttribute(\"href\");\n        const viewsElement = document.getElementById(postUrl);\n\n        // Updated function to display formatted viewer numbers\n        if (postUrl && viewsElement) {\n            fetchTotalVisitors(postUrl).then((views) => {\n                const formattedViews = formatNumberYouTubeStyle(views);\n                viewsElement.textContent = `${formattedViews} views`;\n            });\n        }\n    });\n\n    const options = {\n        rootMargin: \"150px\",\n    };\n\n    const callback = (entries, observer) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting && link) {\n                getNextPage(link)\n                    .then(({ posts, nextLink }) => {\n                        const postFeed = document.querySelector(\".gh-postfeed\");\n\n                        posts.forEach((post) => {\n                            postFeed.append(post);\n\n                            // Fetch views for each new post\n                            const postUrl = post\n                                .querySelector(\".gh-card-link\")\n                                ?.getAttribute(\"href\");\n                            const viewsElement =\n                                post.querySelector(\".gh-card-meta[id]\");\n\n                            // Updated function to display formatted viewer numbers\n                            if (postUrl && viewsElement) {\n                                fetchTotalVisitors(postUrl).then((views) => {\n                                    const formattedViews =\n                                        formatNumberYouTubeStyle(views);\n                                    viewsElement.textContent = `${formattedViews} views`;\n                                });\n                            }\n                        });\n\n                        if (nextLink) {\n                            link = nextLink;\n                            observer.observe(\n                                document.querySelector(\".post:last-of-type\")\n                            );\n                        } else {\n                            observer.disconnect();\n                        }\n                    })\n                    .catch((error) =>\n                        console.error(\"Failed to fetch next page:\", error)\n                    );\n            }\n        });\n    };\n\n    let observer = new IntersectionObserver(callback, options);\n    observer.observe(document.querySelector(\".post:last-of-type\"));\n}\n\n// Fetch and parse next page function\nasync function getNextPage(url) {\n    try {\n        const res = await fetch(url);\n\n        if (!res.ok) {\n            throw new Error(\"Failed to fetch page\");\n        }\n\n        const nextPageHtml = await res.text();\n        const parser = new DOMParser();\n        const parsed = parser.parseFromString(nextPageHtml, \"text/html\");\n        const posts = parsed.querySelectorAll(\".post\");\n        const nextLink = parsed\n            .querySelector('link[rel=\"next\"]')\n            ?.getAttribute(\"href\");\n\n        return { posts, nextLink };\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n","// JavaScript files are compiled and minified during the build process to the assets/built folder. See available scripts in the package.json file.\n\n// Import JS\nimport infiniteScroll from \"./infiniteScroll\";\n\n\n// Call the menu and infinite scroll functions\ninfiniteScroll();\n"],"names":["async","fetchTotalVisitors","pagePath","baseUrl","date","Date","toISOString","split","params","URLSearchParams","period","filters","JSON","stringify","with_imported","comparison","compare_from","compare_to","match_day_of_week","response","fetch","toString","ok","Error","status","data","json","uniqueVisitors","top_stats","find","stat","name","value","console","log","error","formatNumberYouTubeStyle","number","toFixed","link","document","querySelector","getAttribute","querySelectorAll","forEach","post","postUrl","viewsElement","getElementById","then","views","formattedViews","textContent","IntersectionObserver","callback","entries","observer","entry","isIntersecting","url","res","nextPageHtml","text","parsed","DOMParser","parseFromString","posts","nextLink","getNextPage","_ref","postFeed","append","observe","disconnect","catch","rootMargin","infiniteScroll"],"mappings":"yBAAOA,eAAeC,EAAmBC,GACrC,IAEI,MAAMC,EACF,kEACEC,GAAO,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAG3CC,EAAS,IAAIC,gBAAgB,CAC/BC,OAAQ,MACRN,KAAMA,EACNO,QAASC,KAAKC,UAAU,CAAC,CAAC,KAAM,aAAc,CAACX,MAC/CY,cAAe,OACfC,WAAY,kBACZC,aAAc,YACdC,WAAY,YACZC,kBAAmB,SAIjBC,QAAiBC,MAAM,GAAGjB,KAAWK,EAAOa,cAElD,IAAKF,EAASG,GACV,MAAM,IAAIC,MAAM,uBAAuBJ,EAASK,UAGpD,MAAMC,QAAaN,EAASO,OAGtBC,EACFF,EAAKG,UAAUC,MAAMC,GAAuB,iBAAdA,EAAKC,QAC7BC,OAAS,EAEnB,OADAC,QAAQC,IAAI,6BAA6BhC,KAAayB,GAC/CA,CACV,CAAC,MAAOQ,GAEL,OADAF,QAAQE,MAAM,sCAAsCjC,KAAaiC,GAC1D,OACX,CACJ,CCnCA,SAASC,EAAyBC,GAC9B,OAAIA,GAAU,IACH,IAAIA,EAAS,KAAeC,QAAQ,MACpCD,GAAU,IACV,IAAIA,EAAS,KAAWC,QAAQ,MAChCD,GAAU,IACV,IAAIA,EAAS,KAAOC,QAAQ,MAEhCD,EAAOhB,UAClB,EAEe,WACX,IAAIkB,EAAOC,SAASC,cAAc,qBAAqBC,aAAa,QAEpE,IAAKH,EACD,OAIkBC,SAASG,iBAAiB,SAClCC,SAASC,IACnB,MAAMC,EAAUD,EACXJ,cAAc,kBACbC,aAAa,QACbK,EAAeP,SAASQ,eAAeF,GAGzCA,GAAWC,GACX9C,EAAmB6C,GAASG,MAAMC,IAC9B,MAAMC,EAAiBf,EAAyBc,GAChDH,EAAaK,YAAc,GAAGD,SAAsB,GAE5D,IAkDW,IAAIE,sBA3CFC,CAACC,EAASC,KACvBD,EAAQX,SAASa,IACTA,EAAMC,gBAAkBnB,GA8CxCvC,eAA2B2D,GACvB,IACI,MAAMC,QAAYxC,MAAMuC,GAExB,IAAKC,EAAItC,GACL,MAAM,IAAIC,MAAM,wBAGpB,MAAMsC,QAAqBD,EAAIE,OAEzBC,GADS,IAAIC,WACGC,gBAAgBJ,EAAc,aAC9CK,EAAQH,EAAOpB,iBAAiB,SAChCwB,EAAWJ,EACZtB,cAAc,qBACbC,aAAa,QAEnB,MAAO,CAAEwB,QAAOC,WACnB,CAAC,MAAOhC,GACL,MAAM,IAAIZ,MAAMY,EACpB,CACJ,CAjEgBiC,CAAY7B,GACPU,MAAKoB,IAAyB,IAAxBH,MAAEA,EAAKC,SAAEA,GAAUE,EACtB,MAAMC,EAAW9B,SAASC,cAAc,gBAExCyB,EAAMtB,SAASC,IACXyB,EAASC,OAAO1B,GAGhB,MAAMC,EAAUD,EACXJ,cAAc,kBACbC,aAAa,QACbK,EACFF,EAAKJ,cAAc,qBAGnBK,GAAWC,GACX9C,EAAmB6C,GAASG,MAAMC,IAC9B,MAAMC,EACFf,EAAyBc,GAC7BH,EAAaK,YAAc,GAAGD,SAAsB,GAE5D,IAGAgB,GACA5B,EAAO4B,EACPX,EAASgB,QACLhC,SAASC,cAAc,wBAG3Be,EAASiB,YACb,IAEHC,OAAOvC,GACJF,QAAQE,MAAM,6BAA8BA,IAExD,GACF,GA5CU,CACZwC,WAAY,UA+CPH,QAAQhC,SAASC,cAAc,sBAC5C,CChFAmC"}