{"version":3,"file":"index.js","sources":["../js/fetchPageViews.js","../js/infiniteScroll.js","../js/index.js"],"sourcesContent":["// Fetch page views from Plausible API\nexport async function fetchPageViews(url, apiToken, siteId) {\n    try {\n        const response = await fetch(\"https://plausible.sivert.io/api/v2/query\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${apiToken}`,\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                site_id: siteId,\n                metrics: [\"pageviews\"],\n                date_range: \"all\",\n                filters: [\n                    [\"is\", \"event:page\", [url]],\n                ],\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        // Access pageviews from the result\n        const pageviews = data.results[0]?.metrics[0] || 0; // Ensure we get the pageviews count\n        console.log(`Fetched ${pageviews} views for ${url}`);\n        return pageviews; // This will return the page view count (e.g., 1)\n    } catch (error) {\n        console.error(`Failed to fetch page views for ${url}:`, error);\n        return \"Error\";\n    }\n}\n","import { fetchPageViews } from \"./fetchPageViews\";\n\nexport default function infiniteScroll() {\n    const apiToken = \"slJQ_QO9KtsjYsEhAZ0Hk5hzB5oUk4ikrJ-ZAn3n4gVcUB3GrSk0Mw1_w9h3YecT\"; // Replace with your Plausible API token\n    const siteId = \"golf.sivert.io\"; // Replace with your Plausible site ID\n    let link = document.querySelector('link[rel=\"next\"]')?.getAttribute('href');\n\n    if (!link) {\n        return;\n    }\n\n    // Fetch and update views for existing posts on page load\n    const existingPosts = document.querySelectorAll(\".post\");\n    existingPosts.forEach((post) => {\n        const postUrl = post.querySelector(\".gh-card-link\")?.getAttribute(\"href\");\n        const viewsElement = document.getElementById(postUrl);\n\n        if (postUrl && viewsElement) {\n            fetchPageViews(postUrl, apiToken, siteId).then((views) => {\n                viewsElement.textContent = `${views} views`;\n            });\n        }\n    });\n\n    const options = {\n        rootMargin: \"150px\",\n    };\n\n    const callback = (entries, observer) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting && link) {\n                getNextPage(link)\n                    .then(({ posts, nextLink }) => {\n                        const postFeed = document.querySelector(\".gh-postfeed\");\n\n                        posts.forEach((post) => {\n                            postFeed.append(post);\n\n                            // Fetch views for each new post\n                            const postUrl = post.querySelector(\".gh-card-link\")?.getAttribute(\"href\");\n                            const viewsElement = post.querySelector(\".gh-card-meta[id]\");\n\n                            if (postUrl && viewsElement) {\n                                fetchPageViews(postUrl, apiToken, siteId).then((views) => {\n                                    viewsElement.textContent = `${views} views`;\n                                });\n                            }\n                        });\n\n                        if (nextLink) {\n                            link = nextLink;\n                            observer.observe(document.querySelector(\".post:last-of-type\"));\n                        } else {\n                            observer.disconnect();\n                        }\n                    })\n                    .catch((error) => console.error(\"Failed to fetch next page:\", error));\n            }\n        });\n    };\n\n    let observer = new IntersectionObserver(callback, options);\n    observer.observe(document.querySelector(\".post:last-of-type\"));\n}\n\n// Fetch and parse next page function\nasync function getNextPage(url) {\n    try {\n        const res = await fetch(url);\n\n        if (!res.ok) {\n            throw new Error(\"Failed to fetch page\");\n        }\n\n        const nextPageHtml = await res.text();\n        const parser = new DOMParser();\n        const parsed = parser.parseFromString(nextPageHtml, \"text/html\");\n        const posts = parsed.querySelectorAll(\".post\");\n        const nextLink = parsed.querySelector('link[rel=\"next\"]')?.getAttribute(\"href\");\n\n        return { posts, nextLink };\n    } catch (error) {\n        throw new Error(error);\n    }\n}\n","// JavaScript files are compiled and minified during the build process to the assets/built folder. See available scripts in the package.json file.\n\n// Import JS\nimport infiniteScroll from \"./infiniteScroll\";\n\n\n// Call the menu and infinite scroll functions\ninfiniteScroll();\n"],"names":["async","fetchPageViews","url","apiToken","siteId","response","fetch","method","headers","Authorization","body","JSON","stringify","site_id","metrics","date_range","filters","ok","Error","status","data","json","pageviews","results","console","log","error","link","document","querySelector","getAttribute","querySelectorAll","forEach","post","postUrl","viewsElement","getElementById","then","views","textContent","IntersectionObserver","callback","entries","observer","entry","isIntersecting","res","nextPageHtml","text","parsed","DOMParser","parseFromString","posts","nextLink","getNextPage","_ref","postFeed","append","observe","disconnect","catch","rootMargin","infiniteScroll"],"mappings":"yBACOA,eAAeC,EAAeC,EAAKC,EAAUC,GAChD,IACI,MAAMC,QAAiBC,MAAM,2CAA4C,CACrEC,OAAQ,OACRC,QAAS,CACLC,cAAiB,UAAUN,IAC3B,eAAgB,oBAEpBO,KAAMC,KAAKC,UAAU,CACjBC,QAAST,EACTU,QAAS,CAAC,aACVC,WAAY,MACZC,QAAS,CACL,CAAC,KAAM,aAAc,CAACd,SAKlC,IAAKG,EAASY,GACV,MAAM,IAAIC,MAAM,uBAAuBb,EAASc,UAGpD,MAAMC,QAAaf,EAASgB,OAEtBC,EAAYF,EAAKG,QAAQ,IAAIT,QAAQ,IAAM,EAEjD,OADAU,QAAQC,IAAI,WAAWH,eAAuBpB,KACvCoB,CACV,CAAC,MAAOI,GAEL,OADAF,QAAQE,MAAM,kCAAkCxB,KAAQwB,GACjD,OACX,CACJ,EC9Be,WACX,MAAMvB,EAAW,mEACXC,EAAS,iBACf,IAAIuB,EAAOC,SAASC,cAAc,qBAAqBC,aAAa,QAEpE,IAAKH,EACD,OAIkBC,SAASG,iBAAiB,SAClCC,SAASC,IACnB,MAAMC,EAAUD,EAAKJ,cAAc,kBAAkBC,aAAa,QAC5DK,EAAeP,SAASQ,eAAeF,GAEzCA,GAAWC,GACXlC,EAAeiC,EAAS/B,EAAUC,GAAQiC,MAAMC,IAC5CH,EAAaI,YAAc,GAAGD,SAAa,GAEnD,IAwCW,IAAIE,sBAjCFC,CAACC,EAASC,KACvBD,EAAQV,SAASY,IACTA,EAAMC,gBAAkBlB,GAoCxC3B,eAA2BE,GACvB,IACI,MAAM4C,QAAYxC,MAAMJ,GAExB,IAAK4C,EAAI7B,GACL,MAAM,IAAIC,MAAM,wBAGpB,MAAM6B,QAAqBD,EAAIE,OAEzBC,GADS,IAAIC,WACGC,gBAAgBJ,EAAc,aAC9CK,EAAQH,EAAOlB,iBAAiB,SAChCsB,EAAWJ,EAAOpB,cAAc,qBAAqBC,aAAa,QAExE,MAAO,CAAEsB,QAAOC,WACnB,CAAC,MAAO3B,GACL,MAAM,IAAIR,MAAMQ,EACpB,CACJ,CArDgB4B,CAAY3B,GACPU,MAAKkB,IAAyB,IAAxBH,MAAEA,EAAKC,SAAEA,GAAUE,EACtB,MAAMC,EAAW5B,SAASC,cAAc,gBAExCuB,EAAMpB,SAASC,IACXuB,EAASC,OAAOxB,GAGhB,MAAMC,EAAUD,EAAKJ,cAAc,kBAAkBC,aAAa,QAC5DK,EAAeF,EAAKJ,cAAc,qBAEpCK,GAAWC,GACXlC,EAAeiC,EAAS/B,EAAUC,GAAQiC,MAAMC,IAC5CH,EAAaI,YAAc,GAAGD,SAAa,GAEnD,IAGAe,GACA1B,EAAO0B,EACPV,EAASe,QAAQ9B,SAASC,cAAc,wBAExCc,EAASgB,YACb,IAEHC,OAAOlC,GAAUF,QAAQE,MAAM,6BAA8BA,IACtE,GACF,GAlCU,CACZmC,WAAY,UAqCPH,QAAQ9B,SAASC,cAAc,sBAC5C,CCxDAiC"}